set nocompatible              " be iMproved, required
filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" let Vundle manage Vundle, required
Plugin 'gmarik/Vundle.vim'

Plugin 'SirVer/ultisnips'
Plugin 'honza/vim-snippets'
Plugin 'fatih/vim-go'
Plugin 'majutsushi/tagbar'
Plugin 'scrooloose/nerdtree'
Plugin 'Valloric/YouCompleteMe'
Plugin 'scrooloose/nerdcommenter'
Plugin 'ervandew/supertab'

call vundle#end()            " required
filetype plugin indent on    " required

" make YCM compatible with UltiSnips (using supertab)
let g:ycm_key_list_select_completion = ['<C-n>', '<Down>']
let g:ycm_key_list_previous_completion = ['<C-p>', '<Up>']
let g:SuperTabDefaultCompletionType = '<C-n>'

" better key bindings for UltiSnipsExpandTrigger
let g:UltiSnipsExpandTrigger = "<tab>"
let g:UltiSnipsJumpForwardTrigger = "<tab>"
let g:UltiSnipsJumpBackwardTrigger = "<s-tab>"

" If you want :UltiSnipsEdit to split your window.
let g:UltiSnipsEditSplit="vertical"

let g:snips_author="Anfernee Yongkun Gui"
let g:snips_email="anfernee.gui@gmail.com"
let g:snips_github="anfernee"
"
" Settings
"

" Not compatible with vi
set nocompatible

" hides buffer instaead of closing them
set hidden

" Syntax on
syntax on

colorscheme delek

autocmd FileType ruby setlocal tabstop=2 shiftwidth=2 softtabstop=2 expandtab
autocmd FileType sh setlocal tabstop=2 shiftwidth=2 softtabstop=2 expandtab
autocmd FileType html setlocal tabstop=2 shiftwidth=2 softtabstop=2 expandtab
autocmd FileType yaml setlocal tabstop=2 shiftwidth=2 softtabstop=2 expandtab
autocmd FileType c setlocal tabstop=4 shiftwidth=4 softtabstop=4 expandtab
autocmd FileType python setlocal tabstop=4 shiftwidth=4 softtabstop=4 expandtab
autocmd FileType go setlocal tabstop=4 shiftwidth=4 softtabstop=4
autocmd FileType erlang setlocal tabstop=4 shiftwidth=4 softtabstop=4

" set python tw as 79
autocmd FileType python setlocal textwidth=79

set hlsearch      " highlight search
set noswapfile    " no swap file
set nobackup      " no backup files

" NERD_COMMENT
let NERDShutUp=1
map <C-h> <leader>c<space>

" Default <leader>='\'
nnoremap <leader>1 yypVr=

" Return to normal when hit jj in insert mode
inoremap jj <ESC>

" inc search
set is

" Set paste mode
set pastetoggle=<F9>

" Re-select region
vmap < <gv
vmap > >gv

" backspace doesn't work on mac and kali
set backspace=indent,eol,start

" fold column
" set foldcolumn=1

" highlight trailing whitespace
highlight ExtraWhitespace ctermbg=red guibg=red
match ExtraWhitespace /\s\+$/
autocmd BufWinEnter * match ExtraWhitespace /\s\+$/
autocmd InsertEnter * match ExtraWhitespace /\s\+\%#\@<!$/
autocmd InsertLeave * match ExtraWhitespace /\s\+$/
autocmd BufWinLeave * call clearmatches()

" status line
set laststatus=2  " always show status line
set statusline=
set statusline +=%1*\ %n\ %*            "buffer number
set statusline +=%5*%{&ff}%*            "file format
set statusline +=%3*%y%*                "file type
set statusline +=%4*\ %<%F%*            "full path
set statusline +=%2*%m%*                "modified flag
set statusline +=%1*%=%5l%*             "current line
set statusline +=%2*/%L%*               "total lines
set statusline +=%1*%4v\ %*             "virtual column number
set statusline +=%2*0x%04B\ %*          "character under cursor

" Color for status line
hi User1 guifg=#eea040 guibg=#222222 ctermfg=130
hi User2 guifg=#dd3333 guibg=#222222 ctermfg=154
hi User3 guifg=#ff66ff guibg=#222222 ctermfg=124
hi User4 guifg=#a0ee40 guibg=#222222 ctermfg=Green
hi User5 guifg=#eeee40 guibg=#222222 ctermfg=154

" Set to auto read when a file is changed from the outside
set autoread

" I try to use vim
if has("cscope")
  set cscopetag
  " check cscope for definition of a symbol before checking ctags: set to 1
  " if you want the reverse search order.
  set csto=0

  if filereadable("cscope.out")
	  cs add cscope.out
  endif

  " show msg when any other cscope db added
  set cscopeverbose

  nmap <C-\>s :cs find s <C-R>=expand("<cword>")<CR><CR>
  nmap <C-\>g :cs find g <C-R>=expand("<cword>")<CR><CR>  
  nmap <C-\>c :cs find c <C-R>=expand("<cword>")<CR><CR>  
  nmap <C-\>t :cs find t <C-R>=expand("<cword>")<CR><CR>  
  nmap <C-\>e :cs find e <C-R>=expand("<cword>")<CR><CR>  
  nmap <C-\>f :cs find f <C-R>=expand("<cfile>")<CR><CR>  
  nmap <C-\>i :cs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
  nmap <C-\>d :cs find d <C-R>=expand("<cword>")<CR><CR>  


  " Using 'CTRL-spacebar' (intepreted as CTRL-@ by vim) then a search type
  nmap <C-@>s :scs find s <C-R>=expand("<cword>")<CR><CR> 
  nmap <C-@>g :scs find g <C-R>=expand("<cword>")<CR><CR> 
  nmap <C-@>c :scs find c <C-R>=expand("<cword>")<CR><CR> 
  nmap <C-@>t :scs find t <C-R>=expand("<cword>")<CR><CR> 
  nmap <C-@>e :scs find e <C-R>=expand("<cword>")<CR><CR> 
  nmap <C-@>f :scs find f <C-R>=expand("<cfile>")<CR><CR> 
  nmap <C-@>i :scs find i ^<C-R>=expand("<cfile>")<CR>$<CR> 
  nmap <C-@>d :scs find d <C-R>=expand("<cword>")<CR><CR> 
endif

" tagbar
nnoremap <silent> <F10> :TagbarToggle<CR>
nnoremap <silent> <F8> :NERDTreeToggle<CR>

" Used for gf
set path=.,,include,/usr/local/include,/usr/include

" wrap line
nnoremap qq V}gq


" govim
au FileType go nmap <Leader>s <Plug>(go-implements)
au FileType go nmap <Leader>i <Plug>(go-info)
au FileType go nmap <Leader>gd <Plug>(go-doc)
au FileType go nmap <Leader>gv <Plug>(go-doc-vertical)
au FileType go nmap <Leader>gb <Plug>(go-doc-browser)
au FileType go nmap <leader>r <Plug>(go-run)
au FileType go nmap <leader>b <Plug>(go-build)
au FileType go nmap <leader>t <Plug>(go-test)
au FileType go nmap <leader>c <Plug>(go-coverage)
au FileType go nmap <Leader>ds <Plug>(go-def-split)
au FileType go nmap <Leader>dv <Plug>(go-def-vertical)
au FileType go nmap <Leader>dt <Plug>(go-def-tab)
au FileType go nmap <Leader>e <Plug>(go-rename)

let g:go_fmt_command = "goimports"
